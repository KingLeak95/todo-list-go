name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.23.x'
  DOCKER_TEST_IMAGE: to-do-list-test:latest
  DOCKER_APP_IMAGE: to-do-list:latest

jobs:
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Run tests with coverage
        run: go test -v -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          fail_ci_if_error: false

  docker-tests:
    name: Dockerized Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        run: docker build -f Dockerfile.test -t ${{ env.DOCKER_TEST_IMAGE }} .

      - name: Run tests in Docker
        run: docker run --rm ${{ env.DOCKER_TEST_IMAGE }}

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, docker-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build application
        run: |
          go build -trimpath -ldflags="-s -w" -o to-do-list main.go

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: to-do-list-binary
          path: to-do-list

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, docker-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build application image
        run: docker build -t ${{ env.DOCKER_APP_IMAGE }} .

      - name: Test application image
        run: |
          docker run --rm -d --name test-app -p 8080:8080 ${{ env.DOCKER_APP_IMAGE }}
          sleep 5
          curl -f http://localhost:8080/ || exit 1
          docker stop test-app
